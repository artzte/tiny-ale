#!/usr/bin/env bash

# stop on errors
set -e

# to echo
# set -x

usage () {
  echo "tiny <command>"
  echo ""
  echo "Commands:"
  echo "---------"
  echo "api:shell  | opens a bash shell on the Rails API container"
  echo "api:test   | runs test suite for API"
  echo "build      | applies docker-compose to start the API stack"
  echo "db:init    | sets up the development database; will delete the existing data if it exists"
  echo "db:shell   | opens a mysql shell on the mariadb container"
  echo "getSecrets | generally one-time S3 download of any dev secrets files - requires AWS profile and access key"
  echo "log        | tail the production log"
  echo "reset      | deletes the docker images for the API and DB"
  echo "server     | starts the development server"
  echo "ui:shell   | opens a bash shell on the EmberJS client container"
  echo "ui:test    | runs test suite for UI"
}

if [ -z $1 ]
then
  usage
  exit 0
fi

COMMAND=$1

shift

REST_ARGS=$*

PROJECT=tiny-ale
API=${PROJECT}_web_1
UI=${PROJECT}_ux_1
DB=${PROJECT}_db_1
ADMINER=${PROJECT}_adminer_1

db:create () {
  docker exec $API rake db:create
}

db:migrate () {
  docker exec $API rake db:migrate
}

db:drop () {
  docker exec -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 $API rake db:drop
}

db:seed () {
  docker exec $API rake db:seed
}

db:test:load () {
  docker exec $API rake db:test:load
}

db:remove () {
  docker volume remove $PROJECT_tinysis_data
}

api:shell () {
  ARGS=${REST_ARGS:-bash}
  docker exec -it $API $ARGS
} 

ui:shell () {
  ARGS=${REST_ARGS:-bash}
  docker exec -it $UI $ARGS
}

db:shell () {
  docker run -it --network tiny-ale_default --rm --mount src="$(pwd)",target=/src,type=bind mariadb mysql -h db -u root -proot
}

db:import () {
  docker exec -i `docker ps --filter name=tiny-ale_db --format "{{.ID}}"` /bin/bash -c "export TERM=xterm && mysql -proot -uroot nova_production" < $REST_ARGSsourc
}

db:init () {
  db:drop
  db:create
  db:migrate
  db:seed
  db:test:load
}

rehome () {
  sudo chown -R $USER .
  sudo chgrp -R $USER .
}

remove () {
  ui:reset
  db:reset
  api:reset
}

ui:reset () {
  docker rm $UI
  docker rmi ${PROJECT}_ux
}

api:reset () {
  docker rm $API
  docker rmi ${PROJECT}_web
}

db:reset () {
  docker rm $DB
  docker rmi ${PROJECT}_db
}

stop () {
  docker stop $API $DB $ADMINER $UI
}

reset () {
  stop
  remove
}

# if this is not working, you need to get your AWS profile set up in 
# ~/.aws/credentials. Contact artzt@juniperswordplay.com for access.
#
getSecrets () {
  aws s3 cp --profile=tinysis-devtest s3://tinysis-devtest/.env .env
  aws s3 cp --profile=tinysis-devtest s3://tinysis-devtest/api api --recursive
}

build () {
  docker-compose build --memory 1GB
  docker-compose up
}

log () {
  docker exec -it tiny-ale_web_1 tail -f "log/development.log"
}

api:test () {
  docker exec -e RAILS_ENV=test $API bundle exec rspec $REST_ARGS
}

ui:test () {
  docker exec $UI npm test
}

api:build () {
  docker build api --tag name:TINYSIS_PROD --tag sha:$(git rev-parse HEAD)
}

api:console () {
  docker exec -it $API rails c
}

ui:build () {
  docker exec $UI ember build --environment=production
}

case $COMMAND in
  getSecrets|rehome|db:init|build|ui:shell|api:shell|db:shell|db:import|db:remove|log|reset|api:test|ui:test|ui:reset|api:reset|stop|api:build|ui:build|api:console)
      $COMMAND;;
  *)
      usage
      exit 1;;
esac