#!/usr/bin/env bash

# stop on errors
set -e

# to echo
# set -x

usage () {
  echo "tiny <command>"
  echo ""
  echo "Commands:"
  echo "---------"
  echo "getSecrets | generally one-time S3 download of any dev secrets files - requires AWS profile and access key"
  echo "build      | applies docker-compose to start the API stack"
  echo "initDb     | sets up the development database; will delete the existing data if it exists"
  echo "server     | starts the development server"
  echo "shell:api  | opens a bash shell on the Rails API container"
  echo "shell:ui   | opens a bash shell on the EmberJS client container"
  echo "shell:db   | opens a mysql shell on the mariadb container"
  echo "log        | tail the production log"
  echo "reset      | deletes the docker images for the API and DB"
  echo "test:api   | runs test suite for API"
  echo "test:ui    | runs test suite for UI"
}

if [ -z $1 ]
then
  usage
  exit 0
fi

COMMAND=$1

shift

REST_ARGS=$*

PROJECT=tiny-ale
API=${PROJECT}_web_1
UI=${PROJECT}_ux_1
DB=${PROJECT}_db_1
ADMINER=${PROJECT}_adminer_1

createDb () {
  docker exec $API rake db:create
}

migrateDb () {
  docker exec $API rake db:migrate
}

dropDb () {
  docker exec -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 $API rake db:drop
}

seedDb () {
  docker exec $API rake db:seed
}

testPrepare () {
  docker exec $API rake db:test:prepare
}

deleteDbVolume () {
  docker volume remove $PROJECT_tinysis_data
}

shell:api () {
  ARGS=${REST_ARGS:-bash}
  docker exec -it $API $ARGS
} 

shell:ui () {
  ARGS=${REST_ARGS:-bash}
  docker exec -it $UI $ARGS
}

shell:db () {
  docker run -it --network tiny-ale_default --rm --mount src="$(pwd)",target=/src,type=bind mariadb mysql -h db -u root -proot
}

db:import () {
  docker run --network tiny-ale_default --rm --mount src="$(pwd)",target=/src,type=bind mariadb mysql -h db -u root -proot -D nova_production < ./import/mysql_tinysis_210210.sql
}

server () {
  docker exec -it $API rm -rf /api/tmp/pids/server.pid && rails s
}

initDb () {
  dropDb
  createDb
  migrateDb
  seedDb
  testPrepare
}

remove () {
  reset:ui
  reset:db
  reset:api
}

reset:ui () {
  docker rm $UI
  docker rmi ${PROJECT}_ux
}

reset:api () {
  docker rm $API
  docker rmi ${PROJECT}_web
}

reset:db () {
  docker rm $DB
  docker rmi ${PROJECT}_db
}

stop () {
  docker stop $API $DB $ADMINER $UI
}

reset () {
  stop
  remove
}

# if this is not working, you need to get your AWS profile set up in 
# ~/.aws/credentials. Contact artzt@juniperswordplay.com for access.
#
getSecrets () {
  aws s3 cp --profile=tinysis-devtest s3://tinysis-devtest/.env .env
  aws s3 cp --profile=tinysis-devtest s3://tinysis-devtest/api api --recursive
}

build () {
  docker-compose build --parallel
  docker-compose up
}

log () {
  docker exec -it tiny-ale_web_1 tail -f "log/development.log"
}

test:api () {
  docker exec -e RAILS_ENV=test $API bundle exec rspec
}

test:ui () {
  docker exec $UI npm test
}

build:api () {
  docker build api --tag name:TINYSIS_PROD --tag sha:$(git rev-parse HEAD)
}

build:ui () {
  docker exec $UI ember build --environment=production
}

case $COMMAND in
  getSecrets|initDb|build|server|shell:ui|shell:api|shell:db|log|reset|test:api|test:ui|reset:ui|reset:api|stop|build:api|build:ui)
      $COMMAND;;
  *)
      usage
      exit 1;;
esac